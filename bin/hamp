#! /usr/bin/env ruby

if ARGV.size != 2 && ARGV.size != 3
  STDERR.puts "Usage: hamp [--min-spam-score=0.5] <model-index> <test-data-dir>"
  exit 1
end

##
if ARGV[0] =~ /^--min-spam-score=/
  MinSpamScore = ARGV[0].sub(/^--min-spam-score=/,'').to_f
  ARGV.shift
else 
  MinSpamScore = 0.5
end

ModelIndexPath = ARGV[0]
TestDataDir    = ARGV[1]
HamDir = (TestDataDir+'/ham').sub('//','/')
SpamDir = (TestDataDir+'/spam').sub('//','/')

##
unless FileTest.directory?(TestDataDir)
  STDERR.puts "No such directory: #{TestDataDir}"
  exit 1
end

unless FileTest.directory?(HamDir)
  STDERR.puts "No such directory: #{HamDir}"
  exit 1
end

unless FileTest.directory?(SpamDir)
  STDERR.puts "No such directory: #{SpamDir}"
  exit 1
end

##
count = {:ham => 0.0, :spam => 0.0}
ham   = {:correct => 0.0, :wrong => 0.0}

def ham?(path)
  IO.popen("#{File.dirname __FILE__}/ham --min-spam-score=#{MinSpamScore} #{ModelIndexPath}", "r+"){|io|
    open(path){|f| io.write(f.read) }
    io.close_write

    ret = io.gets
    if ret.empty?
      STDERR.puts "Can't open file: #{ModelIndexPath}"
      exit 1
    end
    return !!(ret=~/HAM/)
  }
rescue => ex
  STDERR.puts ex.message
  exit 1
end

## 
count[:ham] = Dir.glob("#{HamDir}/*").size.to_f
count[:spam] = Dir.glob("#{SpamDir}/*").size.to_f
cnt = 0
total = count[:ham].to_i+count[:spam].to_i

## HAM
Dir.glob("#{HamDir}/*").each do |path|
  STDERR.write "# #{cnt+=1}/#{total}\r"
  ham[:correct] += 1.0 if ham?(path)
end

## SPAM
Dir.glob("#{SpamDir}/*").each do |path|
  STDERR.write "# #{cnt+=1}/#{total}\r"
  ham[:wrong] += 1.0 if ham?(path)
end

puts "                           "
puts "#{ham[:correct].to_i} files guessed to be HAM in '#{HamDir}' (total #{count[:ham].to_i} files)"
puts "#{(count[:spam]-ham[:wrong]).to_i} files guessed to be SPAM in '#{SpamDir}' (total #{count[:spam].to_i} files)"
puts ""
precision= (ham[:correct]/count[:ham]) / (ham[:correct]/count[:ham]+ham[:wrong]/count[:spam])
recall   = ham[:correct]/count[:ham]
puts "precision: #{precision}"
puts "recall   : #{recall}"
puts "f-measure: #{2.0/(1.0/recall+1.0/precision)}"
puts ""
