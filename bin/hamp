#! /usr/bin/env ruby

if ARGV.size != 2 && ARGV.size != 3
  STDERR.puts "Usage: hamp [--mbox] [--min-spam-score=0.5] <model-index> <test-data-dir>"
  exit 1
end

##
2.times{|i|
  if ARGV[i] =~ /^--min-spam-score=/
    MinSpamScore = ARGV[0].sub(/^--min-spam-score=/,'').to_f
    ARGV.shift
  elsif ARGV[i] =~ /^--mbox$/
    IS_MBOX = true
    ARGV.shift
  else 
    IS_MBOX = false unless defined? IS_MBOX
    MinSpamScore = 0.5
  end
}

ModelIndexPath = ARGV[0]
TestDataDir    = ARGV[1]
HamDir = (TestDataDir+'/ham').sub('//','/')
SpamDir = (TestDataDir+'/spam').sub('//','/')

##
unless FileTest.directory?(TestDataDir)
  STDERR.puts "No such directory: #{TestDataDir}"
  exit 1
end

if IS_MBOX
  unless FileTest.file?("#{TestDataDir}/ham.mbx")
    STDERR.puts "No such directory: #{TestDataDir}/ham.mbx"
  exit 1
  end

  unless FileTest.file?("#{TestDataDir}/spam.mbx")
    STDERR.puts "No such directory: #{TestDataDir}/spam.mbx"
  exit 1
  end
else
  unless FileTest.directory?(HamDir)
    STDERR.puts "No such directory: #{HamDir}"
  exit 1
  end
  
  unless FileTest.directory?(SpamDir)
    STDERR.puts "No such directory: #{SpamDir}"
    exit 1
  end
end

##
count = {:ham => 0.0, :spam => 0.0}
ham   = {:correct => 0.0, :wrong => 0.0}

def ham?(path)
  IO.popen("#{File.dirname __FILE__}/ham --min-spam-score=#{MinSpamScore} #{ModelIndexPath}", "r+"){|io|
    if path.class == String
      io.write(path)
    else
      open(path){|f| io.write(f.read) }
    end
    io.close_write

    ret = io.gets
    if ret.empty?
      STDERR.puts "Can't open file: #{ModelIndexPath}"
      exit 1
    end
    return !!(ret=~/HAM/)
  }
rescue => ex
  STDERR.puts ex.message
  exit 1
end

## 
count = {:ham => 0, :spam => 0}
if IS_MBOX
  def msg_count(file)
    cnt=0; open(file).each{|l| cnt+=1 if l =~ /^From /}; cnt
  end
  count[:ham] = msg_count("#{TestDataDir}/ham.mbx")
  count[:spam] = msg_count("#{TestDataDir}/spam.mbx")
else
  count[:ham] = Dir.glob("#{HamDir}/*").size.to_f
  count[:spam] = Dir.glob("#{SpamDir}/*").size.to_f
end
cnt = 0
total = count[:ham].to_i+count[:spam].to_i

if IS_MBOX
  ## HAM
  open("#{TestDataDir}/ham.mbx").read.split(/^From |\nFrom /).each do |msg|
    STDERR.write "# #{cnt+=1}/#{total}\r"
    ham[:correct] += 1.0 if ham?(msg)
  end
  
  ## SPAM
  open("#{TestDataDir}/spam.mbx").read.split(/^From |\nFrom /).each do |msg|
    STDERR.write "# #{cnt+=1}/#{total}\r"
    ham[:wrong] += 1.0 if ham?(msg)
  end
else
  ## HAM
  Dir.glob("#{HamDir}/*").each do |path|
    STDERR.write "# #{cnt+=1}/#{total}\r"
    ham[:correct] += 1.0 if ham?(path)
  end
  
  ## SPAM
  Dir.glob("#{SpamDir}/*").each do |path|
    STDERR.write "# #{cnt+=1}/#{total}\r"
    ham[:wrong] += 1.0 if ham?(path)
  end
end

puts "                           "
puts "In '#{HamDir}', #{ham[:correct].to_i} files were classified as HAM (total #{count[:ham].to_i} files)"
puts "In '#{SpamDir}', #{(count[:spam]-ham[:wrong]).to_i} files were classified as SPAM (total #{count[:spam].to_i} files)"
puts ""
precision= ham[:correct] / (ham[:correct]+ham[:wrong])
recall   = ham[:correct]/count[:ham]
puts "precision: #{precision}"
puts "recall   : #{recall}"
puts "f-measure: #{2.0/(1.0/recall+1.0/precision)}"
puts ""
